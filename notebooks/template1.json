{
  "id": "7a40a3ed-14e8-452e-8b3e-c5c47c96ce7f",
  "name": "ADHD Phenotype",
  "userId": "system",
  "isShared": true,
  "createdBy": "system",
  "modifiedBy": "system",
  "notebookContent": "# %% [markdown]\n## Analyze ADHD Phenotype\n# %% [python]\nfrom pyqe import *\n\ntotal_patients_query = Query('ADHD Phenotype') # Always begin your script by creating Query object\n\nawait total_patients_query.get_study_list()\nawait total_patients_query.set_study('<STUDY_ID>') # any STUDY_ID from above list\n# %% [python]\n# Patients who are 4 years old and above\npatient_data = Person.Patient()\nconstraint_age_greater_than_4_years = Constraint()\nconstraint_age_greater_than_4_years.add(Expression(ComparisonOperator.MORE_THAN_EQUAL, 4))\npatient_data.add_age([constraint_age_greater_than_4_years])\n# %% [python]\n# Patients who are diagnosed with ADHD conditions\nadhd_condition_occ = Interactions.ConditionOccurrence(\"ADHD conditions Interaction\")\nadhd_condition_concepts = ConceptSet(\n                           'Conditions',\n                            Domain.CONDITION, \n                           ['406506008', '192132008', '192131001']) \nadhd_condition_occ.add_concept_set(adhd_condition_concepts)\n\n# Add Patients who are prescribed with ADHD medications\nadhd_drug_concepts  = ConceptSet('ADHD Medications',\n                            Domain.DRUG, \n                           ['1091497', '2599', '725', '40114', '308979', '308976', '308973', \n                            '2598', '4493', '36437', '35636', '32937', '10737',\n                            '310384', '313990','310385', '313989', '312938', \n                            '312940', '312941', '374185'])\n\nadhd_drug_exposure = Interactions.DrugExposure(\"ADHD Medications Interaction\")\nadhd_drug_exposure.add_concept_set(adhd_drug_concepts)\n\n\n# Exclusion of Certain Conditions like Dementia\nexclude_other_condition_occ = Interactions.ConditionOccurrence(\"Other Disorders\", CardType.EXCLUDED)\nexclude_condition_concepts = ConceptSet('Conditions',\n                            Domain.CONDITION, \n                           ['191449005', '397923000', '31297008', '18393005', \n                            '50705009', '5507002', '86765009', '110359009', \n                            '40700009', '31216003', '61152003'])\nexclude_other_condition_occ.add_concept_set(exclude_condition_concepts)\n# %% [python]\n# Combine the criteria for demographic data, ADHD conditions & medications\nadhd_group = CriteriaGroup(\n    MatchCriteria.ALL, [patient_data, adhd_condition_occ, exclude_other_condition_occ])\n\n# Add Exclusive to the final Criteria Group\nexclusive_group = CriteriaGroup(\n    MatchCriteria.ANY, [adhd_drug_exposure])\n\nadhd_group.add_exclusive_group(exclusive_group)\n\n# Add criteria group into query\ntotal_patients_query.add_criteria_group(adhd_group)\n# %% [python]\n# Generate the request\nrequest = total_patients_query.get_patient_count_filter()\n\n# Get the result from the request\npatient_count = await Result().get_patient_count(request)\nprint(f'Total number of patients for ADHD Phenotype: {patient_count}')\n# %% [python]\n# Generate Request for Dataframe cohort\nrequest_df = await total_patients_query.get_dataframe_cohort()\n\n# Get Patient Dataframe. Select (1) Patient\npatient_dataframe = await Result().download_dataframe(request_df)\n# %% [python]\n# Peek Into the Patient Demographics Data\ndf1 = patient_dataframe[['pid', 'age', 'gender', 'ethnicity', 'race', 'state']]\ndf1.head(15)\n# %% [markdown]\n### Find the count of Gender & Race Categorized\n# %% [python]\nimport pandas as pd\n\n# Plot bar chart based on Gender & Race\nbarh_table = pd.crosstab(patient_dataframe.race, patient_dataframe.gender)\nax = barh_table.plot.barh(figsize=(12,12), title='Group by Gender & Race Categories')\nax.yaxis.set_tick_params(labelsize='xx-large')\nax.title.set_size(25)\n# %% [markdown]\n### Analyze Comorbidities of ADHD\n# %% [python]\n# Generate Request for Condition Occurrence Dataframe cohort\nrequest_co_df = await total_patients_query.get_dataframe_cohort()\n\n# Get Condition Occurrence Dataframe. Select (2) ConditionOccurrence\ncondition_occurrence_dataframe = Result().download_dataframe(request_co_df)\n# %% [python]\n# Peek Into the Conditions Data\ncondition_occurrence_dataframe_simple = condition_occurrence_dataframe[['pid', 'conditionname', 'condconceptcode', 'conditionstatus', 'startdate', 'enddate']]\ncondition_occurrence_dataframe_simple.head(15)\n# %% [python]\nimport matplotlib.pyplot as plt\n\n# Group Data by Conditions\nco_mini_df = condition_occurrence_dataframe_simple[['conditionname', 'pid']]\nco_group_df = co_mini_df.groupby(['conditionname']).count()\nco_group_df.rename(columns = {'pid':'count'}, inplace = True)\n\n# Sort & Pick the top 10 conditions\nco_group_df.sort_values(by=['count'], inplace=True, ascending=False)\nco_group_df_top10 = co_group_df.head(10)\nplt.figure(figsize=(16,8))\n\n# plot pie chart\nax1 = plt.subplot(121, aspect='equal')\nco_group_df_top10.plot(kind='pie', y = 'count', ax=ax1, autopct='%1.1f%%', \n startangle=90, shadow=False, legend = False, fontsize=14)\n\nplt.title('ADHD & Other Comorbidities', fontdict={'fontsize':20})\nplt.axis('off')\nplt.show()\n# %% [markdown]\n## Null Hypothesis:\n\n### Gender and Stress / Anxiety Disorders are independent of each other.\n# %% [python]\nimport pandas as pd\nimport numpy as np\n\n# Filter for patients with Stress, Anxiety & Depressive Disorders\nmini_condition_occurrence_dataframe = condition_occurrence_dataframe_simple[['pid', 'conditionname']]\nstressAndAnxietyConditions_df = mini_condition_occurrence_dataframe[mini_condition_occurrence_dataframe['conditionname'].isin(['Acute stress disorder','Anxiety disorder','Generalized anxiety disorder', 'Depressive disorder', 'Atypical depressive disorder'])]\nstressAndAnxietyConditions_pid_df = stressAndAnxietyConditions_df[['pid']]\nstressAndAnxietyConditions_pid_unique_df = stressAndAnxietyConditions_pid_df.drop_duplicates(subset=['pid']).copy(deep=True)\nstressAndAnxietyConditions_pid_unique_df['Has Stress & Anxiety'] = True\n\n# Strip the condition occurrence data to only patient ID\ncondition_occurrence_pid_dataframe = mini_condition_occurrence_dataframe[['pid']]\ncondition_occurrence_pid_unique_dataframe = condition_occurrence_pid_dataframe.drop_duplicates(subset=['pid']).copy(deep=True)\n\n#Pick pid and gender\npatient_df2 = patient_dataframe[['pid','gender']]\npatient_df2 = patient_df2.drop_duplicates(subset=['pid'])\n\n# # Join between All patients & patients having Stress & Anxiety\njoined_df = pd.merge(condition_occurrence_pid_unique_dataframe, stressAndAnxietyConditions_pid_unique_df, on='pid', how='left')\njoined_df2 = pd.merge(joined_df, patient_df2, on='pid', how='inner')\n\n# # Cleanup dataframes\ncondition_occurrence_pid_unique_dataframe, stressAndAnxietyConditions_pid_unique_df = pd.DataFrame(), pd.DataFrame()\nlst = [condition_occurrence_pid_unique_dataframe, stressAndAnxietyConditions_pid_unique_df]\ndel condition_occurrence_pid_unique_dataframe, stressAndAnxietyConditions_pid_unique_df # dfs still in list\ndel lst\n\njoined_df2['Has Stress & Anxiety'] = np.where(joined_df2['Has Stress & Anxiety'] != True, False, joined_df2['Has Stress & Anxiety'])\njoined_df2.head(15)\n# %% [markdown]\nTest Null Hypothesis\n# %% [python]\nfrom scipy.stats import chi2_contingency \nimport numpy as np\n\n# Test Null Hypothesis\nco_chisqt = pd.crosstab(joined_df2['Has Stress & Anxiety'], joined_df2['gender'], margins=True)\nco_value = np.array([co_chisqt.iloc[[0,1],[0,1]].values,\n                 ])\n\nco_stat, co_p, co_dof = chi2_contingency(co_value)[0:3]\nprint('Chi-square Analysis:')\nprint('p-value=%.10f, degrees of freedom=%i, statistics=%.3f' % (co_p, co_dof, co_stat))  \n# %% [python]\nsignificance = 0.05\n\nif co_p <= significance:\n\tprint('Result: Dependent - Reject Null Hypothesis (Stress & Anxiety Disorders and Gender are dependent)')\nelse:\n\tprint('Result: Independent - Accept Null Hypothesis (Stress & Anxiety Disorders and Gender are independent)')\n# %% [python]\nfrom scipy.stats import chi2\n\n# Check test-statistic\nprob = 0.95\nco_critical = chi2.ppf(prob, co_dof)\nprint('probability=%.3f, critical=%.3f, stat=%.3f' % (prob, co_critical, co_stat))\nif abs(co_stat) >= co_critical:\n\tprint('Result: Dependent - Reject Null Hypothesis (Stress & Anxiety Disorders and Gender are dependent)')\nelse:\n\tprint('Result: Independent - Accept Null Hypothesis (Stress & Anxiety Disorders and Gender are independent)')"
}
